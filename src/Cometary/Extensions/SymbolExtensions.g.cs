using System;
using System.Reflection;
using System.Collections.Immutable;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Semantics;
using Microsoft.CodeAnalysis.Text;

namespace Cometary
{
    partial class SymbolExtensions
    {
        public static IInvocationExpression Update(this IInvocationExpression self, Object @receiverOpt, ISymbol @method, ImmutableArray<Object> @arguments) => self;
        public static IInvocationExpression Update(this IInvocationExpression self, Object @receiverOpt, ISymbol @method, ImmutableArray<Object> @arguments, ImmutableArray<String> @argumentNamesOpt, ImmutableArray<RefKind> @argumentRefKindsOpt, Boolean @isDelegateCall, Boolean @expanded, Boolean @invokedAsExtensionMethod, ImmutableArray<Int32> @argsToParamsOpt, Enum @resultKind, Object @binderOpt, ISymbol @type) => self;
        public static ILocalReferenceExpression Update(this ILocalReferenceExpression self, ISymbol @localSymbol, Object @constantValueOpt, ISymbol @type) => self;
        public static ILocalReferenceExpression Update(this ILocalReferenceExpression self, ISymbol @localSymbol, Boolean @isDeclaration, Object @constantValueOpt, ISymbol @type) => self;
        public static IFieldReferenceExpression Update(this IFieldReferenceExpression self, Object @receiver, ISymbol @fieldSymbol, Object @constantValueOpt, Enum @resultKind, ISymbol @typeSymbol) => self;
        public static IFieldReferenceExpression Update(this IFieldReferenceExpression self, Object @receiverOpt, ISymbol @fieldSymbol, Object @constantValueOpt, Enum @resultKind, Boolean @isByValue, ISymbol @type) => self;
        public static IPropertyReferenceExpression Update(this IPropertyReferenceExpression self, Object @receiverOpt, ISymbol @propertySymbol, Enum @resultKind, ISymbol @type) => self;
        public static IIndexedPropertyReferenceExpression Update(this IIndexedPropertyReferenceExpression self, Object @receiverOpt, ISymbol @indexer, ImmutableArray<Object> @arguments, ImmutableArray<String> @argumentNamesOpt, ImmutableArray<RefKind> @argumentRefKindsOpt, Boolean @expanded, ImmutableArray<Int32> @argsToParamsOpt, Object @binderOpt, Boolean @useSetterForDefaultArgumentGeneration, ISymbol @type) => self;
        public static IEventReferenceExpression Update(this IEventReferenceExpression self, Object @receiverOpt, ISymbol @eventSymbol, Boolean @isUsableAsField, Enum @resultKind, ISymbol @type) => self;
        public static IParameterReferenceExpression Update(this IParameterReferenceExpression self, ISymbol @parameterSymbol, ISymbol @type) => self;
        public static IBinaryOperatorExpression Update(this IBinaryOperatorExpression self, Enum @operatorKind, Object @left, Object @right, Object @constantValueOpt, ISymbol @methodOpt, Enum @resultKind, ISymbol @type) => self;
        public static IUnaryOperatorExpression Update(this IUnaryOperatorExpression self, Enum @operatorKind, Object @operand, Object @constantValueOpt, ISymbol @methodOpt, Enum @resultKind, ISymbol @type) => self;
        public static IIncrementExpression Update(this IIncrementExpression self, Enum @operatorKind, Object @operand, ISymbol @methodOpt, Conversion @operandConversion, Conversion @resultConversion, Enum @resultKind, ISymbol @type) => self;
        public static ICompoundAssignmentExpression Update(this ICompoundAssignmentExpression self, ValueType @operator, Object @left, Object @right, Conversion @leftConversion, Conversion @finalConversion, Enum @resultKind, ISymbol @type) => self;
        public static ILiteralExpression Update(this ILiteralExpression self, Object @constantValueOpt, ISymbol @type) => self;
        public static IConversionExpression Update(this IConversionExpression self, Object @operand, Conversion @conversion, Boolean @isBaseConversion, Boolean @checked, Boolean @explicitCastInCode, Object @constantValueOpt, ISymbol @type) => self;
        public static IObjectCreationExpression Update(this IObjectCreationExpression self, ISymbol @constructor, ImmutableArray<Object> @arguments, ImmutableArray<String> @argumentNamesOpt, ImmutableArray<RefKind> @argumentRefKindsOpt, Boolean @expanded, ImmutableArray<Int32> @argsToParamsOpt, Object @constantValueOpt, Object @initializerExpressionOpt, Object @binderOpt, ISymbol @type) => self;
        public static IObjectCreationExpression Update(this IObjectCreationExpression self, ISymbol @constructor, ImmutableArray<ISymbol> @constructorsGroup, ImmutableArray<Object> @arguments, ImmutableArray<String> @argumentNamesOpt, ImmutableArray<RefKind> @argumentRefKindsOpt, Boolean @expanded, ImmutableArray<Int32> @argsToParamsOpt, Object @constantValueOpt, Object @initializerExpressionOpt, Object @binderOpt, ISymbol @type) => self;
        public static ILambdaExpression Update(this ILambdaExpression self, ISymbol @symbol, IBlockStatement @body, ImmutableArray<Diagnostic> @diagnostics, Object @binder, ISymbol @type) => self;
        public static IDefaultValueExpression Update(this IDefaultValueExpression self, Object @constantValueOpt, ISymbol @type) => self;
        public static IConditionalChoiceExpression Update(this IConditionalChoiceExpression self, Boolean @isByRef, Object @condition, Object @consequence, Object @alternative, Object @constantValueOpt, ISymbol @type) => self;
        public static ISizeOfExpression Update(this ISizeOfExpression self, Object @sourceType, Object @constantValueOpt, ISymbol @type) => self;
        public static IAwaitExpression Update(this IAwaitExpression self, Object @expression, ISymbol @getAwaiter, ISymbol @isCompleted, ISymbol @getResult, ISymbol @type) => self;
        public static IInstanceReferenceExpression Update(this IInstanceReferenceExpression self, ISymbol @type) => self;
        public static IAssignmentExpression Update(this IAssignmentExpression self, Object @left, Object @right, RefKind @refKind, ISymbol @type) => self;
        public static IInvalidExpression Update(this IInvalidExpression self, Enum @resultKind, ImmutableArray<ISymbol> @symbols, ImmutableArray<Object> @childBoundNodes, ISymbol @type) => self;
        public static IReturnStatement Update(this IReturnStatement self, RefKind @refKind, Object @expressionOpt) => self;
        public static IBranchStatement Update(this IBranchStatement self, ISymbol @label, Object @caseExpressionOpt, Object @labelExpressionOpt) => self;
        public static IBlockStatement Update(this IBlockStatement self, ImmutableArray<ISymbol> @locals, ImmutableArray<ISymbol> @localFunctions, ImmutableArray<Object> @statements) => self;
        public static IBlockStatement Update(this IBlockStatement self, ImmutableArray<Object> @statements) => self;
        public static ITryStatement Update(this ITryStatement self, IBlockStatement @tryBlock, ImmutableArray<Object> @catchBlocks, IBlockStatement @finallyBlockOpt, Boolean @preferFaultHandler) => self;
        public static IPlaceholderExpression Update(this IPlaceholderExpression self, ISymbol @type) => self;
        public static IEventAssignmentExpression Update(this IEventAssignmentExpression self, ISymbol @event, Boolean @isAddition, Boolean @isDynamic, Object @receiverOpt, Object @argument, ISymbol @type) => self;
        public static IConversionExpression Update(this IConversionExpression self, Object @operand, Object @targetType, Conversion @conversion, ISymbol @type) => self;
        public static IIsTypeExpression Update(this IIsTypeExpression self, Object @operand, Object @targetType, Conversion @conversion, ISymbol @type) => self;
        public static ITypeOfExpression Update(this ITypeOfExpression self, Object @sourceType, ISymbol @getTypeFromHandle, ISymbol @type) => self;
        public static IArrayCreationExpression Update(this IArrayCreationExpression self, ImmutableArray<Object> @bounds, Object @initializerOpt, ISymbol @type) => self;
        public static IInstanceReferenceExpression Update(this IInstanceReferenceExpression self, ISymbol @type) => self;
        public static ITypeParameterObjectCreationExpression Update(this ITypeParameterObjectCreationExpression self, Object @initializerExpressionOpt, ISymbol @type) => self;
        public static INullCoalescingExpression Update(this INullCoalescingExpression self, Object @leftOperand, Object @rightOperand, Conversion @leftConversion, ISymbol @type) => self;
        public static IArrayElementReferenceExpression Update(this IArrayElementReferenceExpression self, Object @expression, ImmutableArray<Object> @indices, ISymbol @type) => self;
        public static IPointerIndirectionReferenceExpression Update(this IPointerIndirectionReferenceExpression self, Object @operand, ISymbol @type) => self;
        public static IAddressOfExpression Update(this IAddressOfExpression self, Object @operand, Boolean @isFixedStatementAddressOf, ISymbol @type) => self;
        public static IInstanceReferenceExpression Update(this IInstanceReferenceExpression self, ISymbol @type) => self;
        public static IConditionalAccessExpression Update(this IConditionalAccessExpression self, Object @receiver, Object @accessExpression, ISymbol @type) => self;
        public static IConditionalAccessInstanceExpression Update(this IConditionalAccessInstanceExpression self, Int32 @id, ISymbol @type) => self;
        public static IBranchStatement Update(this IBranchStatement self, ISymbol @label) => self;
        public static IBranchStatement Update(this IBranchStatement self, ISymbol @label) => self;
        public static IEmptyStatement Update(this IEmptyStatement self, Enum @flavor) => self;
        public static IIfStatement Update(this IIfStatement self, Object @condition, Object @consequence, Object @alternativeOpt) => self;
        public static IWhileUntilLoopStatement Update(this IWhileUntilLoopStatement self, ImmutableArray<ISymbol> @locals, Object @condition, Object @body, ISymbol @breakLabel, ISymbol @continueLabel) => self;
        public static IWhileUntilLoopStatement Update(this IWhileUntilLoopStatement self, ImmutableArray<ISymbol> @locals, Object @condition, Object @body, ISymbol @breakLabel, ISymbol @continueLabel) => self;
        public static IForLoopStatement Update(this IForLoopStatement self, ImmutableArray<ISymbol> @outerLocals, Object @initializer, ImmutableArray<ISymbol> @innerLocals, Object @condition, Object @increment, Object @body, ISymbol @breakLabel, ISymbol @continueLabel) => self;
        public static IForEachLoopStatement Update(this IForEachLoopStatement self, Object @enumeratorInfoOpt, Conversion @elementConversion, Object @iterationVariableType, ImmutableArray<ISymbol> @iterationVariables, Object @expression, Object @deconstructionOpt, Object @body, Boolean @checked, ISymbol @breakLabel, ISymbol @continueLabel) => self;
        public static ISwitchStatement Update(this ISwitchStatement self, Object @loweredPreambleOpt, Object @expression, ISymbol @constantTargetOpt, ImmutableArray<ISymbol> @innerLocals, ImmutableArray<ISymbol> @innerLocalFunctions, ImmutableArray<Object> @switchSections, ISymbol @breakLabel, ISymbol @stringEquality) => self;
        public static IFixedStatement Update(this IFixedStatement self, ImmutableArray<ISymbol> @locals, IVariableDeclarationStatement @declarations, Object @body) => self;
        public static IUsingStatement Update(this IUsingStatement self, ImmutableArray<ISymbol> @locals, IVariableDeclarationStatement @declarationsOpt, Object @expressionOpt, Conversion @iDisposableConversion, Object @body) => self;
        public static IThrowStatement Update(this IThrowStatement self, Object @expressionOpt) => self;
        public static IReturnStatement Update(this IReturnStatement self, Object @expression) => self;
        public static ILockStatement Update(this ILockStatement self, Object @argument, Object @body) => self;
        public static IInvalidStatement Update(this IInvalidStatement self, ImmutableArray<Object> @childBoundNodes) => self;
        public static IVariableDeclarationStatement Update(this IVariableDeclarationStatement self, ISymbol @localSymbol, Object @declaredType, Object @initializerOpt, ImmutableArray<Object> @argumentsOpt) => self;
        public static IVariableDeclarationStatement Update(this IVariableDeclarationStatement self, ImmutableArray<IVariableDeclarationStatement> @localDeclarations) => self;
        public static ILabelStatement Update(this ILabelStatement self, ISymbol @label) => self;
        public static ILabelStatement Update(this ILabelStatement self, ISymbol @label, Object @body) => self;
        public static IExpressionStatement Update(this IExpressionStatement self, Object @expression) => self;
    }
}
